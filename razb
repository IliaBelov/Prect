{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPTGce1EZ+ZiL3TD//1vGKg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IliaBelov/Prect/blob/main/razb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vXJr5V-daL_A"
      },
      "source": [
        "from sympy import *"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P3eRtVQDaOf7"
      },
      "source": [
        "\n",
        "v = Function(\"v\")\n",
        "h = Function(\"h\")"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C_WrBYFhaVpa"
      },
      "source": [
        "t = symbols(\"t\")"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "WkFgTUSAadDW",
        "outputId": "11768e44-5b11-420a-a8f1-5ab77bd421ad"
      },
      "source": [
        "de = Eq(diff(v(t), t),9.8- 0.01*v(t))\n",
        "de"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle \\frac{d}{d t} v{\\left(t \\right)} = 9.8 - 0.01 v{\\left(t \\right)}$",
            "text/plain": [
              "Eq(Derivative(v(t), t), 9.8 - 0.01*v(t))"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "Glhyzp5EaxgT",
        "outputId": "30c6c7b1-81bd-46de-ae8e-e6e9ead169d9"
      },
      "source": [
        "sol1 = dsolve(de, v(t), ics={v(0):0})\n",
        "sol1"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle v{\\left(t \\right)} = 980.0 - 980.0 e^{- 0.01 t}$",
            "text/plain": [
              "Eq(v(t), 980.0 - 980.0*exp(-0.01*t))"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "wuTx7PJBa79E",
        "outputId": "f30c9000-1e62-4013-e954-d114fc5803ca"
      },
      "source": [
        "de2 = Eq(diff(h(t), t), sol1.rhs)\n",
        "de2"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle \\frac{d}{d t} h{\\left(t \\right)} = 980.0 - 980.0 e^{- 0.01 t}$",
            "text/plain": [
              "Eq(Derivative(h(t), t), 980.0 - 980.0*exp(-0.01*t))"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "DI8tQY34bSjl",
        "outputId": "79299a4f-326f-44ce-919d-a5b44894823f"
      },
      "source": [
        "sol2 = dsolve(de2, h(t), ics={h(0): 0})\n",
        "sol2"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle h{\\left(t \\right)} = 980 t - 98000.0 + 98000.0 e^{- 0.01 t}$",
            "text/plain": [
              "Eq(h(t), 980*t - 98000.0 + 98000.0*exp(-0.01*t))"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhL0dNMdbZZ0",
        "outputId": "c10f15ba-0b48-4f5e-94c1-701d948f30c5"
      },
      "source": [
        "ht = 3.21\n",
        "ht"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.21"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "id": "t-sz2bZRb9AX",
        "outputId": "d7c84472-8049-406c-ae8e-7711f87260e1"
      },
      "source": [
        "v = sol1.subs(t, ht) \n",
        "v"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/latex": "$\\displaystyle v{\\left(3.21 \\right)} = 30.9584584619062$",
            "text/plain": [
              "Eq(v(3.21), 30.9584584619062)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "WpcAEHO0cSPH",
        "outputId": "48c665da-7392-497a-be6f-2efbe74b5c36"
      },
      "source": [
        "Vplot = plot(sol1.rhs, (t,0,40), line_color='red')"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}